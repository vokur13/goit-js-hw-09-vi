{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,IAAKL,SAASC,cAAc,oBAG9BH,EAAKC,KAAKO,iBAAiB,UAI3B,SAAkBC,GAChBA,EAAEC,iBACF,IAAMC,EAAQC,OAAOZ,EAAKI,MAAMS,QA4BXC,EAhCR,EAgCkBV,EA3BPO,EA4BjB,IAAII,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACTP,GAAY,EACRI,EACFF,EAAQ,CAAEM,SAAAR,EAAUV,UAGpBa,EAAO,CAAEK,SAAAR,EAAUV,S,GAGpBA,E,KAtCFmB,MACC,SAAAC,G,IAAGC,EAAQD,EAARF,SAAUlB,EAAKoB,EAALpB,MAKX,OAJAsB,QAAQC,IAAI,uBAAwCC,OAAfH,EAAS,QAAYG,OAANxB,EAAM,OAC1DyB,EAAA/B,GAASgC,OAAOC,QACd,uBAAwCH,OAAfH,EAAS,QAAYG,OAANxB,EAAM,OAEzC,CAAEkB,SAAAG,EAAUrB,Q,IAErB,SAAAoB,G,IAAGQ,EAAQR,EAARF,SAAUlB,EAAKoB,EAALpB,MAKX,OAJAsB,QAAQC,IAAI,sBAAuCC,OAAfI,EAAS,QAAYJ,OAANxB,EAAM,OACzDyB,EAAA/B,GAASgC,OAAOG,QACd,sBAAuCL,OAAfI,EAAS,QAAYJ,OAANxB,EAAM,OAExC,CAAEkB,SAAAU,EAAU5B,Q,IAGtBmB,MAAK,SAAAC,G,IAAGU,EAAQV,EAARF,SAAUlB,EAAKoB,EAALpB,MAEjB,OAwBN,SAA0B+B,EAAU/B,GAC3B,IAAIW,SAAQ,SAACC,EAASC,GAC3B,IAAMZ,EAAOO,OAAOZ,EAAKK,KAAKQ,OACxBP,EAASM,OAAOZ,EAAKM,OAAOO,OAC9BuB,EAAaC,aAAY,WAC3B,IAAMnB,EAAgBC,KAAKC,SAAW,GACtCe,GAAY,EACZ/B,GAASC,EAELa,GACFF,EAAQ,CAAEM,SAAAa,EAAU/B,UACpBsB,QAAQC,IAAI,uBAAwCC,OAAfO,EAAS,QAAYP,OAANxB,EAAM,OAC1DyB,EAAA/B,GAASgC,OAAOC,QACd,uBAAwCH,OAAfO,EAAS,QAAYP,OAANxB,EAAM,SAIhDa,EAAO,CAAEK,SAAAa,EAAU/B,UACnBsB,QAAQC,IAAI,sBAAuCC,OAAfO,EAAS,QAAYP,OAANxB,EAAM,OACzDyB,EAAA/B,GAASgC,OAAOG,QACd,sBAAuCL,OAAfO,EAAS,QAAYP,OAANxB,EAAM,QAI7C+B,IAAa7B,GACfgC,cAAcF,E,GAEf/B,E,IApDDkC,CAAiBL,EAAU9B,GACpB,CAAEkB,SAAAY,EAAU9B,Q,IAEpBoC,OAAM,SAAAhB,G,IAAGiB,EAAQjB,EAARF,SAAUlB,EAAKoB,EAALpB,MAClBsB,QAAQC,IAAI,sBAAuCC,OAAfa,EAAS,QAAYb,OAANxB,EAAM,OACzDyB,EAAA/B,GAASgC,OAAOG,QAAQ,sBAAuCL,OAAfa,EAAS,QAAYb,OAANxB,EAAM,M,IAI3E,IAAuBU,EAAUV,C","sources":["src/js/03-promises.js"],"sourcesContent":["// const { formats } = require('flatpickr/dist/utils/formatting');\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  btn: document.querySelector('[type=\"submit\"]'),\n};\n\nrefs.form.addEventListener('submit', onSubmit);\n\nlet position = 0;\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  const delay = Number(refs.delay.value);\n  createPromise(position, delay)\n    .then(\n      ({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        return { position, delay };\n      },\n      ({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        return { position, delay };\n      }\n    )\n    .then(({ position, delay }) => {\n      createPromiseSet(position, delay);\n      return { position, delay };\n    })\n    .catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      position += 1;\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Fulfill\n      } else {\n        reject({ position, delay });\n        // Reject\n      }\n    }, delay);\n  });\n}\n\nfunction createPromiseSet(position, delay) {\n  return new Promise((resolve, reject) => {\n    const step = Number(refs.step.value);\n    const amount = Number(refs.amount.value);\n    let intervalID = setInterval(() => {\n      const shouldResolve = Math.random() > 0.3;\n      position += 1;\n      delay += step;\n\n      if (shouldResolve) {\n        resolve({ position, delay });\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        // Fulfill\n      } else {\n        reject({ position, delay });\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        // Reject\n      }\n      if (position === amount) {\n        clearInterval(intervalID);\n      }\n    }, step);\n  });\n}\n\nfunction onFulfill({ position, delay }) {\n  console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\nfunction onReject({ position, delay }) {\n  console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","btn","addEventListener","e","preventDefault","delay1","Number","value","position5","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","position","then","param","position1","console","log","concat","$parcel$interopDefault","Notify","success","position2","failure","position3","position6","intervalID","setInterval","clearInterval","$ce04d3a99e08e73b$var$createPromiseSet","catch","position4"],"version":3,"file":"03-promises.1aa74080.js.map"}