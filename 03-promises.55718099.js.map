{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,IAAKL,SAASC,cAAc,oBAG9BH,EAAKC,KAAKO,iBAAiB,UAI3B,SAAkBC,GAChBA,EAAEC,iBACF,MAAMC,EAAQC,OAAOZ,EAAKI,MAAMS,QA4BXC,EAhCR,EAgCkBV,EA3BPO,EA4BjB,IAAII,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACTP,GAAY,EACRI,EACFF,EAAQ,CAAEM,SAAAR,E,MAAUV,IAGpBa,EAAO,CAAEK,SAAAR,E,MAAUV,GAAQ,GAG5BA,EAAM,KAtCRmB,MACC,EAAGD,SAAAE,EAAQpB,MAAEA,MACXqB,QAAQC,IAAI,uBAAqBF,QAAiBpB,OAClDuB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAqBL,QAAiBpB,OAEjC,CAAEkB,SAAAE,E,MAAUpB,MAErB,EAAGkB,SAAAQ,EAAQ1B,MAAEA,MACXqB,QAAQC,IAAI,sBAAoBI,QAAiB1B,OACjDuB,EAAA7B,GAAS8B,OAAOG,QACd,sBAAoBD,QAAiB1B,OAEhC,CAAEkB,SAAAQ,E,MAAU1B,MAGtBmB,MAAK,EAAGD,SAAAU,EAAQ5B,MAAEA,MA0BvB,SAA0B6B,EAAU7B,GAC3B,IAAIW,SAAQ,CAACC,EAASC,KAC3B,MAAMZ,EAAOO,OAAOZ,EAAKK,KAAKQ,OACxBP,EAASM,OAAOZ,EAAKM,OAAOO,OAClC,IAAIqB,EAAaC,aAAY,KAC3B,MAAMjB,EAAgBC,KAAKC,SAAW,GACtCa,GAAY,EACZ7B,GAASC,EAELa,GACFF,EAAQ,CAAEM,SAAAW,E,MAAU7B,IACpBqB,QAAQC,IAAI,uBAAqBO,QAAiB7B,OAClDuB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAqBI,QAAiB7B,SAIxCa,EAAO,CAAEK,SAAAW,E,MAAU7B,IACnBqB,QAAQC,IAAI,sBAAoBO,QAAiB7B,OACjDuB,EAAA7B,GAAS8B,OAAOG,QACd,sBAAoBE,QAAiB7B,QAIrC6B,IAAa3B,GACf8B,cAAcF,EAAW,GAE1B7B,EAAK,G,CApDNgC,CAAiBL,EAAU5B,GACpB,CAAEkB,SAAAU,E,MAAU5B,MAEpBkC,OAAM,EAAGhB,SAAAiB,EAAQnC,MAAEA,MAClBqB,QAAQC,IAAI,sBAAoBa,QAAiBnC,OACjDuB,EAAA7B,GAAS8B,OAAOG,QAAQ,sBAAoBQ,QAAiBnC,MAAU,IAI7E,IAAuBU,EAAUV,C","sources":["src/js/03-promises.js"],"sourcesContent":["// const { formats } = require('flatpickr/dist/utils/formatting');\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  btn: document.querySelector('[type=\"submit\"]'),\n};\n\nrefs.form.addEventListener('submit', onSubmit);\n\nlet position = 0;\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  const delay = Number(refs.delay.value);\n  createPromise(position, delay)\n    .then(\n      ({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        return { position, delay };\n      },\n      ({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        return { position, delay };\n      }\n    )\n    .then(({ position, delay }) => {\n      createPromiseSet(position, delay);\n      return { position, delay };\n    })\n    .catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      position += 1;\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Fulfill\n      } else {\n        reject({ position, delay });\n        // Reject\n      }\n    }, delay);\n  });\n}\n\nfunction createPromiseSet(position, delay) {\n  return new Promise((resolve, reject) => {\n    const step = Number(refs.step.value);\n    const amount = Number(refs.amount.value);\n    let intervalID = setInterval(() => {\n      const shouldResolve = Math.random() > 0.3;\n      position += 1;\n      delay += step;\n\n      if (shouldResolve) {\n        resolve({ position, delay });\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        // Fulfill\n      } else {\n        reject({ position, delay });\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        // Reject\n      }\n      if (position === amount) {\n        clearInterval(intervalID);\n      }\n    }, step);\n  });\n}\n\nfunction onFulfill({ position, delay }) {\n  console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\nfunction onReject({ position, delay }) {\n  console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","btn","addEventListener","e","preventDefault","delay1","Number","value","position5","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","position","then","position1","console","log","$parcel$interopDefault","Notify","success","position2","failure","position3","position6","intervalID","setInterval","clearInterval","$47d4ff9957288465$var$createPromiseSet","catch","position4"],"version":3,"file":"03-promises.55718099.js.map"}